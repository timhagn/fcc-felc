{"version":3,"sources":["../rr_rqm.js"],"names":["React","ReactDOM","PropTypes","Redux","createStore","applyMiddleware","bindActionCreators","combineReducers","compose","ReactRedux","Provider","connect","ReduxThunk","default","strip","html","DOMParser","parseFromString","body","textContent","replace","trim","RandomQuotes","console","log","props","fetchQuotes","event","preventDefault","quote","author","isFetching","lastUpdated","handleNewQuoteClick","Date","toString","PureComponent","propTypes","string","isRequired","bool","number","QuoteBox","newQuoteClick","func","TweetIt","hashtags","text","encodeURI","query","location","href","REQUEST_QUOTES","ERROR_QUOTES","RECEIVE_QUOTES","requestQuotes","type","errorQuotes","receiveQuotes","json","randNum","Math","floor","random","content","title","receivedAt","now","dispatch","quotesRequest","Request","fetch","then","response","error","defaultState","quotesReducer","state","action","reducer","quotes","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","mapStateToProps","actionCreators","mapDispatchToProps","AppContainer","render","document","getElementById"],"mappings":"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","sourcesContent":["const React = React\nconst ReactDOM = ReactDOM\nconst PropTypes = PropTypes\nconst {\n  createStore,\n  applyMiddleware,\n  bindActionCreators,\n  combineReducers,\n  compose,\n} = Redux;\nconst { Provider, connect } = ReactRedux;\nconst ReduxThunk = ReduxThunk.default;\n\n// Helper function to strip all html to text.\nconst strip = (html) => (new DOMParser()).parseFromString(html, 'text/html')\n    .body.textContent.replace(/(<([^>]+)>)/ig, '').trim()\n\n// Main Connected Container renders QuoteBox according to state update.\nclass RandomQuotes extends React.PureComponent {\n  componentDidMount = () => {\n    console.log('didMount:', this)\n    this.props.fetchQuotes();\n  }\n\n  handleNewQuoteClick = (event) => {\n    event.preventDefault()\n    this.props.fetchQuotes()\n  }\n\n  render() {\n    console.log('RandomQuotes:', this.props)\n    const { quote, author, isFetching, lastUpdated } = this.props\n    if (isFetching === true) {\n      console.log('RandomQuotesFetching:', this.props)\n      return (\n          <div className=\"Home\">\n            <QuoteBox className=\"Home-intro\"\n                      newQuoteClick={this.handleNewQuoteClick}\n                      author={'Last updated: ' + new Date(lastUpdated).toString()}\n                      quote={'Loading...'}/>\n          </div>\n      )\n    }\n    else {\n      console.log('RandomQuotesChange:', this.props)\n      return (\n          <div className=\"Home\">\n            <QuoteBox className=\"Home-intro\"\n                      newQuoteClick={this.handleNewQuoteClick}\n                      author={author}\n                      quote={quote}/>\n          </div>\n      )\n    }\n  }\n}\n// PropTypes for RandomQuotes.\nRandomQuotes.propTypes = {\n  quote: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number.isRequired,\n};\n\n// Builds and returns the QuoteBox button.\nconst QuoteBox = ({quote, author, newQuoteClick}) => {\n  console.log('QuoteBox: ', quote, author)\n  return(\n      <div id=\"wrapper\">\n        <div id=\"quote-box\">\n          <div className=\"quote-text\" id=\"text\">\n            <i className=\"fa fa-quote-left\"> </i>\n            {quote || 'Here should be a quote...'}\n          </div>\n          <div className=\"quote-author\" id=\"author\">{author || 'A-NONE-NYMOUS'}</div>\n          <div className=\"buttons\">\n            <TweetIt quote={quote}\n                     author={author}/>\n            <button className=\"button\"\n                    id=\"new-quote\"\n                    onClick={newQuoteClick}>New quote</button>\n          </div>\n        </div>\n      </div>\n  )};\n// PropTypes for QuoteBox.\nQuoteBox.propTypes = {\n  quote: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n  newQuoteClick: PropTypes.func.isRequired,\n};\n\n// Builds and returns Tweet button.\nconst TweetIt = ({quote, author}) => {\n  const hashtags = '100DaysOfCode,freeCodeCamp,RandomQuotes',\n      text = encodeURI(`${quote} - ${author}\\n`),\n      query = `text=${text}&url=\"${location.href}\"&hashtags=${hashtags}`,\n      href = `https://twitter.com/intent/tweet?${query}`;\n  return (\n      <a className=\"button\"\n         id=\"tweet-quote\"\n         title=\"Tweet this quote!\"\n         target=\"_blank\"\n         href={href}>\n        <i className=\"fab fa-twitter-square\" />\n      </a>\n  )\n};\n// PropTypes for TweetIt.\nTweetIt.propTypes = {\n  quote: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n};\n\n// Actions.\nconst REQUEST_QUOTES = 'REQUEST_QUOTES'\nconst ERROR_QUOTES = 'ERROR_QUOTES'\nconst RECEIVE_QUOTES = 'RECEIVE_QUOTES'\n// Action Providers.\nconst requestQuotes = () => { return { type: REQUEST_QUOTES } }\nconst errorQuotes = () => { return { type: ERROR_QUOTES } }\nconst receiveQuotes = (json) => {\n  console.log(json)\n  let randNum = Math.floor(Math.random() * 10);\n  let {content: quote, title: author} = json[randNum];\n  console.log('receiveQuotes():', strip(quote), author)\n  return {\n    type: RECEIVE_QUOTES,\n    quote: strip(quote),\n    author,\n    receivedAt: Date.now()\n  }\n};\nconst fetchQuotes = () => {\n  return (dispatch) => {\n    dispatch(requestQuotes());\n    const quotesRequest = new Request(\"https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=10&callback=\");\n    console.log(quotesRequest)\n    return fetch(quotesRequest)\n        .then(\n            response => response.json(),\n            error => console.log('An error occurred.', error)\n        )\n        .then(json => json ? dispatch(receiveQuotes(json))\n                           : dispatch(errorQuotes(json))\n        )\n  }\n};\n\n\n// Set up defaultState.\nconst defaultState = {\n  isFetching: false,\n  author: '',\n  quote: '',\n  lastUpdated: 0,\n};\n// Reducer - Fetches and returns quotes.\nconst quotesReducer = (state = defaultState, action) => {\n  console.log('quotesReducer:', state, action.type)\n  switch (action.type) {\n    case REQUEST_QUOTES:\n      console.log('requested')\n      return {...state,\n        isFetching: true,\n      }\n    case RECEIVE_QUOTES:\n      console.log('received')\n      return {...state,\n        isFetching: false,\n        quote: action.quote,\n        author: action.author,\n        lastUpdated: action.receivedAt\n      }\n    case ERROR_QUOTES:\n    default:\n      return state\n  }\n};\n// Combine for easier access.\nconst reducer = combineReducers({\n  quotes: quotesReducer,\n});\n// Add Redux Dev-Tools if available.\nconst composeEnhancers = typeof window !== 'undefined' && \n                         window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n                         || compose;\n// Create Store and set \"preloadedState\".\nconst store = createStore(\n    reducer,\n    {quotes: {...defaultState}},\n    composeEnhancers(\n      applyMiddleware(ReduxThunk)\n    )\n);\n\n// Extract quotes and map to props.\nconst mapStateToProps = (state, props) => ({ ...state.quotes })\n\n// \"Map\" action Creator(s).\nconst actionCreators = {\n  fetchQuotes,\n}\nconst mapDispatchToProps = (dispatch) => bindActionCreators(actionCreators, dispatch)\n\n// Connect and render.\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(RandomQuotes)\n\nReactDOM.render(\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"file":"rr_rqm.js"}