{"version":3,"sources":["../rcontext_rqm.js"],"names":["React","ReactDOM","PropTypes","strip","html","DOMParser","parseFromString","body","textContent","replace","trim","RandomQuotes","quote","author","handleNewQuoteClick","console","log","propTypes","string","isRequired","func","TweetIt","hashtags","text","encodeURI","query","location","href","DEFAULT_STATE","createContext","Provider","Consumer","QuoteProvider","fetchQuotes","event","preventDefault","quotesRequest","Request","fetch","then","response","json","error","receiveQuotes","randNum","Math","floor","random","content","title","setState","props","state","children","Component","QuoteConsumer","render","document","getElementById"],"mappings":"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","sourcesContent":["const React = React;\nconst ReactDOM = ReactDOM;\nconst PropTypes = PropTypes;\n\n// Helper function to strip all html to text.\nconst strip = (html) => (new DOMParser()).parseFromString(html, 'text/html')\n    .body.textContent.replace(/(<([^>]+)>)/ig, '').trim();\n\n// Main \"App\" renders the Quote Box.\nconst RandomQuotes = ({quote, author, handleNewQuoteClick}) => {\n  console.log('QuoteBox: ', quote, author, handleNewQuoteClick)\n  return(\n      <div id=\"wrapper\">\n        <div id=\"quote-box\">\n          <div className=\"quote-text\" id=\"text\">\n            <i className=\"fa fa-quote-left\"> </i>\n            {quote || 'Here will be a quote...'}\n          </div>\n          <div className=\"quote-author\" id=\"author\">{author || 'A-NONE-NYMOUS'}</div>\n          <div className=\"buttons\">\n            <TweetIt quote={quote}\n                     author={author}/>\n            <button className=\"button\"\n                    id=\"new-quote\"\n                    onClick={handleNewQuoteClick}>New quote</button>\n          </div>\n        </div>\n      </div>\n  )};\n// PropTypes for QuoteBox.\nRandomQuotes.propTypes = {\n  quote: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n  handleNewQuoteClick: PropTypes.func.isRequired,\n};\n\n// Builds and returns Tweet button.\nconst TweetIt = ({quote, author}) => {\n  const hashtags = '100DaysOfCode,freeCodeCamp,RandomQuotes',\n        text = encodeURI(`${quote} - ${author}\\n`),\n        query = `text=${text}&url=\"${location.href}\"&hashtags=${hashtags}`,\n        href = `https://twitter.com/intent/tweet?${query}`;\n  return (\n      <a className=\"button\"\n         id=\"tweet-quote\"\n         title=\"Tweet this quote!\"\n         target=\"_blank\"\n         href={href}>\n        <i className=\"fab fa-twitter-square\" />\n      </a>\n  )\n};\n// PropTypes for QuoteBox.\nTweetIt.propTypes = {\n  quote: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n};\n\n// Create Provider & Consumer with Context API.\nconst DEFAULT_STATE = {\n  quote: '',\n  author: '',\n};\n\nconst {Provider, Consumer} = React.createContext(DEFAULT_STATE);\n\nclass QuoteProvider extends React.Component {\n  state = DEFAULT_STATE;\n\n  componentWillMount = () => {\n    this.fetchQuotes();\n  }\n\n  handleNewQuoteClick = (event) => {\n    event.preventDefault();\n    this.fetchQuotes();\n  };\n\n  fetchQuotes = () => {\n    const quotesRequest = new Request(\"https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=10&callback=\");\n    console.log('fetchQuotes: ', quotesRequest)\n    return fetch(quotesRequest)\n        .then(\n            response => response.json(),\n            error => console.log('An error occurred.', error)\n        )\n        .then(json => json ?\n            this.receiveQuotes(json) :\n            error => console.log('An error occurred.', error)\n        )\n  };\n\n  receiveQuotes = (json) => {\n    console.log('receiveQuotes: ', json)\n    let randNum = Math.floor(Math.random() * 10);\n    let {content: quote, title: author} = json[randNum];\n    console.log('receiveQuotes', strip(quote), author)\n    this.setState({\n      quote: strip(quote),\n      author,\n    })\n  };\n\n  render() {\n    console.log('Provider: ', this.props);\n    return (\n        <Provider\n            value={{\n              ...this.state,\n              handleNewQuoteClick: this.handleNewQuoteClick,\n            }}\n        >\n          {this.props.children}\n        </Provider>\n    );\n  }\n}\n\nconst QuoteConsumer = (props) => {\n  console.log('DataConsumer:', props);\n  return (\n      <Consumer>\n        {({quote, author, handleNewQuoteClick}) =>\n            <div className=\"Home\">\n              <RandomQuotes className=\"Home-intro\"\n                            handleNewQuoteClick={handleNewQuoteClick}\n                            quote={quote}\n                            author={author}/>\n            </div>\n        }\n      </Consumer>\n  );\n};\n\nReactDOM.render(\n    <QuoteProvider>\n      <QuoteConsumer />\n    </QuoteProvider>,\n    document.getElementById('root')\n);"],"file":"rcontext_rqm.js"}