{"version":3,"sources":["../rr_user.js"],"names":["React","Component","Redux","createStore","applyMiddleware","bindActionCreators","ReactRedux","Provider","connect","ReduxThunk","default","App","props","fetchUsers","event","selectUser","target","value","userList","currentUser","loading","error","message","handleChange","Select","renderOptions","map","user","id","name","onChange","CurrentUser","JSON","stringify","reducer","state","action","type","find","actionCreators","requestUsers","requestUsersSuccess","requestUsersError","dispatch","fetch","then","response","ok","json","Error","catch","console","preloadedState","store","AppContainer","mapStateToProps","mapDispatchToProps","ReactDOM","render","document","getElementById"],"mappings":"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","sourcesContent":["const { Component } = React;\nconst { createStore, applyMiddleware, bindActionCreators } = Redux;\nconst { Provider, connect } = ReactRedux;\nconst ReduxThunk = ReduxThunk.default;\n\nclass App extends Component {\n  componentDidMount = () => {\n    this.props.fetchUsers();\n  }\n\n  handleChange = (event) => {\n    this.props.selectUser(event.target.value);\n  }\n\n  render() {\n    const userList = this.props.userList;\n    const currentUser = this.props.currentUser;\n\n    if (this.props.loading) {\n      return (\n          <div>Loading...</div>\n      )\n    } else if (this.props.error) {\n      return (\n          <div>{this.props.error.message}</div>\n      )\n    }\n\n    return (\n        <div>\n          <Select onChange={this.handleChange} userList={userList} />\n          <CurrentUser currentUser={currentUser} />\n        </div>\n    );\n  }\n}\n\nconst Select = (props) => {\n  const renderOptions = props.userList.map(user =>\n      <option value={user.id} key={`user-${user.id}`}>{user.name}</option>\n  )\n\n\n  return (\n      <select onChange={props.onChange} defaultValue=\"\">\n        <option value=\"\">Select an avatar</option>\n        {[...renderOptions]}\n      </select>\n  );\n}\n\nconst CurrentUser = (props) => {\n  return (\n      <div>\n        <p>{props.currentUser && JSON.stringify(props.currentUser)}</p>\n      </div>\n  )\n}\n\n/* --- REDUCERS --- */\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"REQUEST_USERS\":\n      return {\n        ...state,\n        loading: action.loading,\n        userList: []\n      }\n    case \"REQUEST_USERS_SUCCESS\":\n      return {\n        ...state,\n        loading: action.loading,\n        userList: action.userList\n      }\n    case \"REQUEST_USERS_ERROR\":\n      return {\n        ...state,\n        loading: action.loading,\n        error: action.error\n      }\n    case \"SELECT_USER\":\n      return {\n        ...state,\n        currentUser: state.userList.find(user => user.id == action.currentUser)\n      }\n    default:\n      return state\n  }\n};\n\n/* --- ACTION CREATORS --- */\nconst actionCreators = {\n  requestUsers: () => {\n    return {\n      type: \"REQUEST_USERS\",\n      loading: true,\n      error: null\n    }\n  },\n  requestUsersSuccess: (userList) => {\n    return {\n      type: \"REQUEST_USERS_SUCCESS\",\n      userList,\n      loading: false,\n      error: null\n    }\n  },\n  requestUsersError: (error) => {\n    return {\n      type: \"REQUEST_USERS_ERROR\",\n      loading: false,\n      userList: [],\n      error\n    }\n  },\n  fetchUsers: () => {\n    return function (dispatch) {\n      dispatch(actionCreators.requestUsers());\n\n      return fetch(\"http://jsonplaceholder.typicode.com/users\")\n          .then(\n              response => {\n                if (response.ok) {\n                  return response.json()\n                }\n                throw new Error(\"404\");\n              }\n          )\n          .then(json =>\n              dispatch(actionCreators.requestUsersSuccess(json))\n          ).catch(error => {\n            console.error(error);\n            dispatch(actionCreators.requestUsersError(error))\n          })\n    }\n  },\n  selectUser: (currentUser) => {\n    return {\n      type: \"SELECT_USER\",\n      currentUser\n    }\n  }\n};\n\n/* --- STORE --- */\nconst preloadedState = {userList: [], currentUser: null};\nconst store = createStore(reducer, preloadedState, applyMiddleware(ReduxThunk));\n\n/* --- CONNECT --- */\nconst AppContainer = connect(\n    function mapStateToProps(state, props) {\n      return {\n        userList: state.userList,\n        currentUser: state.currentUser,\n        loading: state.loading,\n        error: state.error\n      };\n    },\n    function mapDispatchToProps(dispatch) {\n      return bindActionCreators(actionCreators, dispatch);\n    }\n)(App);\n\n/* --- RENDER THE APP --- */\nReactDOM.render(\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>,\n    document.getElementById(\"app\")\n);"],"file":"rr_user.js"}