{"version":3,"sources":["../rr_drumm.js"],"names":["React","ReactDOM","PropTypes","Redux","createStore","applyMiddleware","bindActionCreators","combineReducers","compose","ReactRedux","Provider","connect","ReduxThunk","default","LMMS_URL","triggerKeys","DrumMachine","props","console","log","document","addEventListener","handleKeyPress","fetchSamples","removeEventListener","event","id","target","firstElementChild","playDrumPad","String","fromCharCode","keyCode","drumPads","updateDisplay","getAttribute","currentTime","play","sampleList","isFetching","lastUpdated","currentDisplay","DrumPads","Object","keys","map","key","index","el","playSampleClick","sampleName","sample","state","PureComponent","propTypes","object","isRequired","bool","number","string","DrumPad","forwardRef","ref","triggerKey","padStyle","func","REQUEST_SAMPLES","ERROR_SAMPLES","RECEIVE_SAMPLES","UPDATE_DISPLAY","requestSamples","type","errorSamples","receiveSamples","json","lastInstrument","tree","item","path","push","replace","receivedAt","Date","now","dispatch","samplesRequest","Request","fetch","then","response","error","text","defaultState","samplesReducer","action","reducer","samples","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","mapStateToProps","actionCreators","mapDispatchToProps","AppContainer","render","getElementById"],"mappings":"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","sourcesContent":["const React = React\nconst ReactDOM = ReactDOM\nconst PropTypes = PropTypes\nconst {\n  createStore,\n  applyMiddleware,\n  bindActionCreators,\n  combineReducers,\n  compose,\n} = Redux;\nconst { Provider, connect } = ReactRedux;\nconst ReduxThunk = ReduxThunk.default;\n\nconst LMMS_URL = 'https://raw.githubusercontent.com/LMMS/assets/master/Samples/Sample%20library/Drums/'\nconst triggerKeys = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C']\n\n// Main Connected Container renders Drum Machine according to state update.\nclass DrumMachine extends React.PureComponent {\n  constructor(props) {\n    super(props)\n    this.drumPads = []\n  }\n  componentDidMount = () => {\n    console.log('didMount:', this)\n    document.addEventListener('keydown', this.handleKeyPress);\n    this.props.fetchSamples();\n  }\n  componentWillUnmount = () => {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n\n  // Handlers.\n  playSampleClick = (event) => {\n    const id = event.target.firstElementChild.id\n    this.playDrumPad(id)\n  }\n  handleKeyPress = (event) => {\n    const id = String.fromCharCode(event.keyCode)\n    this.playDrumPad(id)\n  }\n\n  // Plays Sound from given DrumPad with id if exists.\n  playDrumPad = (id) => {\n    if (this.drumPads[id]) {\n      console.log('play', this.drumPads[id])\n      this.props.updateDisplay(this.drumPads[id].getAttribute('name'))\n      this.drumPads[id].currentTime = 0\n      this.drumPads[id].play();\n    }\n  }\n\n  render() {\n    const { sampleList, isFetching, lastUpdated, currentDisplay } = this.props\n    if (isFetching === true) {\n      console.log('DrumMachineFetching:', this.props)\n      return (\n          <div className=\"wrapper\">\n            Loading...\n          </div>\n      )\n    }\n    else {\n      const DrumPads = Object.keys(sampleList).map((key, index) => {\n        if (index < 9) {\n          return (\n              <DrumPad ref={el => (this.drumPads[triggerKeys[index]] = el)}\n                       key={index}\n                       playSampleClick={this.playSampleClick}\n                       sampleName={sampleList[key][1].sampleName}\n                       triggerKey={triggerKeys[index]}\n                       sample={sampleList[key][1].sample}/>\n          )\n        }\n      })\n      console.log('DrumMachineChange:', this.props, this.state)\n      return (\n          <div id=\"wrapper\">\n            <div className=\"drum-box\" id=\"drum-machine\">\n              <div className=\"drum-box\" id=\"display\">\n                {currentDisplay || 'DRUM ON!'}\n              </div>\n              {DrumPads}\n            </div>\n          </div>\n      )\n    }\n  }\n}\n// PropTypes for RandomQuotes.\nDrumMachine.propTypes = {\n  sampleList: PropTypes.object.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number.isRequired,\n  currentDisplay: PropTypes.string,\n};\n\n// Builds and returns a single drum pad.\nconst DrumPad = React.forwardRef(({sampleName, triggerKey, sample, playSampleClick, padStyle}, ref) => {\n  return (\n      <button id={sampleName}\n              onClick={playSampleClick}\n              className=\"calc-button\"\n              style={padStyle}>\n        <audio ref={ref}\n               className='clip'\n               id={triggerKey}\n               src={sample}\n               name={sampleName}\n               preload=\"auto\"></audio>\n        {triggerKey}\n      </button>\n  )\n});\n// PropTypes for DrumPad.\nDrumPad.propTypes = {\n  sampleName: PropTypes.string.isRequired,\n  triggerKey: PropTypes.string.isRequired,\n  sample: PropTypes.string.isRequired,\n  playSampleClick: PropTypes.func.isRequired,\n  padStyle: PropTypes.string,\n};\n\n// Actions.\nconst REQUEST_SAMPLES = 'REQUEST_SAMPLES'\nconst ERROR_SAMPLES = 'ERROR_SAMPLES'\nconst RECEIVE_SAMPLES = 'RECEIVE_SAMPLES'\nconst UPDATE_DISPLAY = 'UPDATE_DISPLAY'\n// Action Providers.\nconst requestSamples = () => { return { type: REQUEST_SAMPLES } }\nconst errorSamples = () => { return { type: ERROR_SAMPLES } }\nconst receiveSamples = (json) => {\n  console.log(json)\n  let sampleList = {},\n      lastInstrument = ''\n  json.tree.map((item) => {\n    if (item.type === 'tree') {\n      lastInstrument = item.path\n      sampleList[item.path] = []\n    }\n    else {\n      sampleList[lastInstrument].push({\n        sample: LMMS_URL + item.path,\n        sampleName: item.path.replace(lastInstrument + '/', '').replace('.flac', '')\n      })\n    }\n  })\n  console.log(sampleList)\n  return {\n    type: RECEIVE_SAMPLES,\n    sampleList: sampleList,\n    receivedAt: Date.now()\n  }\n};\nconst fetchSamples = () => {\n  return (dispatch) => {\n    dispatch(requestSamples());\n    // Fetch the Sample list from LMMS assets (CC0).\n    // (https://github.com/LMMS/assets/tree/master/Samples/Sample%20library/Drums)\n    const samplesRequest = new Request('https://api.github.com/repos/LMMS/assets/git/trees/fef895eb405c2a7aad48679dd5b43fed3c1dd3bc?recursive=true');\n    console.log(samplesRequest)\n    return fetch(samplesRequest)\n        .then(\n            response => response.json(),\n            error => console.log('An error occurred.', error)\n        )\n        .then(json => json ? dispatch(receiveSamples(json))\n            : dispatch(errorSamples(json))\n        )\n  }\n};\nconst updateDisplay = (text) => {\n  return { type: UPDATE_DISPLAY, text: text}\n}\n\n// Set up defaultState.\nconst defaultState = {\n  isFetching: false,\n  sampleList: {},\n  lastUpdated: 0,\n  currentDisplay: '',\n};\n// Reducer - Fetches and returns quotes.\nconst samplesReducer = (state = defaultState, action) => {\n  console.log('samplesReducer:', state, action.type)\n  switch (action.type) {\n    case REQUEST_SAMPLES:\n      console.log('requested')\n      return {...state,\n        isFetching: true,\n      }\n    case RECEIVE_SAMPLES:\n      console.log('received')\n      return {...state,\n        isFetching: false,\n        sampleList: action.sampleList,\n        lastUpdated: action.receivedAt\n      }\n    case UPDATE_DISPLAY:\n      console.log('display:', action)\n      return {...state,\n        currentDisplay: action.text\n      }\n    case ERROR_SAMPLES:\n    default:\n      return state\n  }\n};\n// Combine for easier access.\nconst reducer = combineReducers({\n  samples: samplesReducer,\n});\n// Add Redux Dev-Tools if available.\nconst composeEnhancers = typeof window !== 'undefined' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    || compose;\n// Create Store and set \"preloadedState\".\nconst store = createStore(\n    reducer,\n    {samples: {...defaultState}},\n    composeEnhancers(\n        applyMiddleware(ReduxThunk)\n    )\n);\n\n// Extract quotes and map to props.\nconst mapStateToProps = (state, props) => {\n  return ({ ...state.samples })\n}\n\n// \"Map\" action Creator(s).\nconst actionCreators = {\n  fetchSamples,\n  updateDisplay,\n}\nconst mapDispatchToProps = (dispatch) => bindActionCreators(actionCreators, dispatch)\n\n// Connect and render.\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(DrumMachine)\n\nReactDOM.render(\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"file":"rr_drumm.js"}